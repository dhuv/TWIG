<?php

class DB {
	/* @var self::$connection \mysqli */
	protected static $connection = null; // getConnection()

	function __construct ($DB=null) {
		self::getConnection($DB);
	}

	/**
	 * @return mysqli
	 * @throws Exception
	 */
	public static function getConnection($DB=null) {
		if ($DB == null && self::$connection) { return self::$connection; }

		// if DB auth values were not passed in, use the defaults
		if (!is_array($DB)) { $DB = array('host'=>SE\DB_SERVER, 'user'=>SE\DB_USER, 'password'=>SE\DB_PASS, 'dbname'=>SE\DB_DBASE, 'charset'=>SE\DB_CHARSET); }
        self::$connection = @new mysqli($DB['host'], $DB['user'], $DB['password'], $DB['dbname']);
		if (isset($DB['charset']) && $DB['charset']) { self::$connection->set_charset('utf8'); }

		if (self::$connection->connect_error) {
			error_log('DB ERROR: Connect error "' .self::$connection->connect_error. '"');
			throw new Exception('DB connection error');
		}

		return self::$connection;
	}

	/*
	 * Wrapper for mysql query method
	 * @param string $query
	 * @param array DB info
	 * @return mysqli|bool
	 * @throws Exception
	 */
	public static function query($query, $DB=null) {
		$result = self::getConnection($DB)->query($query);

		if ($result === false) {
			error_log('DB ERROR: query = ' .$query. '", error = "' .self::getConnection()->error. '"');
			throw new Exception('DB Error');
		}

		return $result;
	}

	/*
	 * Wrapper for mysqli fetch_assoc method
	 * @param string|\mysqli_result $query_or_result
	 * @return array (associative)
	 */
	public static function getRow($query_or_result) {
		if (!is_object($query_or_result)) {
			$query_or_result = self::query($query_or_result);
		}

		return $query_or_result->fetch_assoc();
	}

	/**
	 * Returns the value of the first column of the first row of the query result.
	 * Returns null both if no rows selected and if cell value is null.
	 * Useful for getting yes/no answers or counts from the database.
	 * @param string $query
	 * @return mixed scalar
	 */
	public static function getCell($query) {
		$row = self::query($query)->fetch_row();

		return $row ? $row[0] : null;
	}

	/**
	 * Returns a single column's values in a numbered array.
	 * @param string $query
	 * @return array
	 */
	public static function getColumn($query) {
		$column = array();

		$result = self::query($query);
		while ($row = $result->fetch_row()) {
			$column[] = $row[0];
		}

		return $column;
	}

	/**
	 * Returns the entire result set as a numbered array of associative arrays.
	 * @param string $query
	 * @return array
	 */
	public static function getTable($query) {
		$table = array();

		$result = self::query($query);
		while ($row = $result->fetch_assoc()) {
			$table[] = $row;
		}

		return $table;
	}

	/**
	 * array('row1col1' => 'row1col2', 'row2col1' => 'row2col2')
	 * @param string $query
	 * @return array second column indexed by first column
	 */
	public static function getKeyValueMap($query) {
		$key_value_map = array();

		$result = self::query($query);
		while ($row = $result->fetch_row()) {
			$key_value_map[$row[0]] = $row[1];
		}

		return $key_value_map;
	}

	/**
	 * @param string $arbitrary_string
	 * @return string
	 */
	public static function escape($arr) {
	    if (is_string($arr)) {
    	    $is_string = true;
        	$arr = array($arr);
	    } else {
			$is_string = false;
		}

		$conn = self::getConnection();
	    foreach ($arr as $key => $val) {
    	    if (!is_string($val)) { continue; }
	        $arr[$key] = $conn->real_escape_string(stripslashes(trim($val)));
    	}

	    return ($is_string)?$arr[0]:$arr;
	}

    /**
     * Escapes a string to be used in a 'like' clause. Note that this escapes only _ and %, and the
     * result still has to be run through DB::escape().
     * <code>
     * $where = 'name like("%' .DB::escape(DB::escapeLike($_REQUEST['search_string'])) .'%")';
     * </code>
     * @param string $like
     * @return string
     */
    public static function escapeLike ($like) {
        return str_replace(['_', '%'], ['\\_', '\\%'], $like);
    }

	/*
	 * Runs an insert statement
	 * @param string $query
	 * @return int (insert id)
	 */
	public static function insert($query) {
		self::query($query);
		return self::getInsertId();
	}

	/*
	 * Runs an update/delete statement
	 * @param string $query
	 * @return int number of rows affected by the update/delete query
	 */
	public static function update($query) {
		self::query($query);
		return self::getAffectedRows();
	}

	/*
	 * Gets ID generated by a query on a table with a column having the AUTO_INCREMENT attribute)
	 * @return int
	 */
	public static function getInsertId() { return (int)self::getConnection()->insert_id; }

	/*
	 * Gets number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query)
	 * @return int
	 */
	public static function getAffectedRows() { return self::getConnection()->affected_rows; }

	/*
	 * Gets number of rows from SELECT
	 * @param object (mysqli result)
	 * @return int
	 */
	public static function getNumRows($result) { return $result->num_rows; }
}
